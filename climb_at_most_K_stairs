def Count_ways(total_steps , k):
   "this objective function will calculate the valid ways to reach the destination [total_steps] by taking at-most K steps at a time."
   """ 
   DP = [0] * (total_steps + 1)
   DP[1] = 1
   DP[2] = 2
   DP[3] = 4
   DP[4] =  [1,1,1,1] + [1+1+2],[1,2,1],[2,1,1] , [2+2] + [3,1],[1,3] , [4]
                1                  3                1          2         1
   """
   DP = [0] * (total_steps + 1 )
   DP[0] = 1
   DP[1] = 1

   for state in range(2,total_steps + 1 ,1):
       "set the value for the current state."

       previous_state = state -1
       "condition 1 : visit all k previous states from the current state  , 2. Previous state should exist "

       while(previous_state >= state - k ) and ((state - previous_state) >= 0 ):
           "add the values from previous statesand store in the current state"
           DP[state]+= DP[previous_state]
           previous_state-= 1


   return DP[total_steps]

total_steps = int(input("enter the total no of steps : "))
maximum_possible_jump = int(input("enter the maximum possible jump at a time : "))
Total_unique_ways = Count_ways(total_steps , maximum_possible_jump )
print("total unique ways possible to jump from 0th step to "+ str(total_steps)+"th step is : "+str(Total_unique_ways))

       
